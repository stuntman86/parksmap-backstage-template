apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: deploy-parksmap-web
  title: Deploy Parksmap Web Application
  description: Deploy your existing Parksmap application from Quay.io directly to OpenShift
  tags:
    - recommended
    - parksmap
    - openshift
    - deployment
spec:
  owner: platform-team
  type: service
  parameters:
    - title: Application Configuration
      required:
        - name
        - namespace
      properties:
        name:
          title: Application Name
          type: string
          description: Name for your parksmap deployment
          default: 'parksmap-web'
          pattern: '^[a-z0-9-]+$'
        namespace:
          title: Target Namespace
          type: string
          description: OpenShift namespace to deploy to
          default: 'parksmap-demo'
        replicas:
          title: Number of Replicas
          type: integer
          description: Number of pod replicas
          default: 2
          minimum: 1
          maximum: 5
        imageTag:
          title: Image Tag
          type: string
          description: Image tag to deploy
          default: 'latest'
          enum:
            - latest
            - v1.0
            - dev
  steps:
    - id: log-info
      name: Log Deployment Information
      action: debug:log
      input:
        message: |
          ðŸš€ Deploying Parksmap Web Application:
          - Name: ${{ parameters.name }}
          - Namespace: ${{ parameters.namespace }}
          - Replicas: ${{ parameters.replicas }}
          - Image: quay.io/gpagiata/parksmap-web:${{ parameters.imageTag }}
          
          Generating OpenShift deployment manifests...

    - id: create-namespace
      name: Create Namespace
      action: debug:log
      input:
        message: |
          Creating namespace: ${{ parameters.namespace }}
          
          kubectl create namespace ${{ parameters.namespace }} --dry-run=client -o yaml | kubectl apply -f -

    - id: deploy-app
      name: Deploy Application
      action: debug:log
      input:
        message: |
          Deploying application with these manifests:
          
          # Deployment
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ parameters.name }}
            namespace: ${{ parameters.namespace }}
            labels:
              app: ${{ parameters.name }}
          spec:
            replicas: ${{ parameters.replicas }}
            selector:
              matchLabels:
                app: ${{ parameters.name }}
            template:
              metadata:
                labels:
                  app: ${{ parameters.name }}
              spec:
                containers:
                - name: parksmap
                  image: quay.io/gpagiata/parksmap-web:${{ parameters.imageTag }}
                  ports:
                  - containerPort: 8080
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "100m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
          
          ---
          # Service
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{ parameters.name }}
            namespace: ${{ parameters.namespace }}
          spec:
            selector:
              app: ${{ parameters.name }}
            ports:
            - port: 8080
              targetPort: 8080
          
          ---
          # Route
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: ${{ parameters.name }}
            namespace: ${{ parameters.namespace }}
          spec:
            to:
              kind: Service
              name: ${{ parameters.name }}
            port:
              targetPort: 8080
            tls:
              termination: edge

  output:
    text:
      - title: Deployment Manifests Generated!
        content: |
          ðŸŽ‰ **Parksmap Application Ready for Deployment!**
          
          **Configuration:**
          - **Application**: ${{ parameters.name }}
          - **Namespace**: ${{ parameters.namespace }}
          - **Image**: quay.io/gpagiata/parksmap-web:${{ parameters.imageTag }}
          - **Replicas**: ${{ parameters.replicas }}
          
          **Next Steps - Apply these commands to OpenShift:**
          
          ```bash
          # Create namespace
          oc create namespace ${{ parameters.namespace }}
          
          # Deploy the application
          oc apply -f - << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ parameters.name }}
            namespace: ${{ parameters.namespace }}
            labels:
              app: ${{ parameters.name }}
          spec:
            replicas: ${{ parameters.replicas }}
            selector:
              matchLabels:
                app: ${{ parameters.name }}
            template:
              metadata:
                labels:
                  app: ${{ parameters.name }}
              spec:
                containers:
                - name: parksmap
                  image: quay.io/gpagiata/parksmap-web:${{ parameters.imageTag }}
                  ports:
                  - containerPort: 8080
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "100m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{ parameters.name }}
            namespace: ${{ parameters.namespace }}
          spec:
            selector:
              app: ${{ parameters.name }}
            ports:
            - port: 8080
              targetPort: 8080
          ---
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: ${{ parameters.name }}
            namespace: ${{ parameters.namespace }}
          spec:
            to:
              kind: Service
              name: ${{ parameters.name }}
            port:
              targetPort: 8080
            tls:
              termination: edge
          EOF
          
          # Get the route URL
          oc get route ${{ parameters.name }} -n ${{ parameters.namespace }}
          ```
          
          **Expected Route URL:**
          https://${{ parameters.name }}-${{ parameters.namespace }}.apps.lme876y3k0d5f0456e.eastus.aroapp.io
